#pragma once

#include <string>
#include "root_directory.h" // This is a configuration file generated by CMake.

class FileSystem {
private:
    typedef std::string(*Builder) (const std::string& path);

public:
    static std::string GetPath(const std::string& path) {
        static std::string(*pathBuilder)(std::string const&) = GetPathBuilder();
        return (*pathBuilder)(path);
    }

private:
    static std::string const& GetRoot() {
        static char const* envRoot = getenv("LOGL_ROOT_PATH");
        static char const* givenRoot = (envRoot != nullptr ? envRoot : logl_root);
        static std::string root = (givenRoot != nullptr ? givenRoot : "");
        return root;
    }

    //static std::string(*foo (std::string const &)) getPathBuilder()
    static Builder GetPathBuilder() {
        if (GetRoot() != "")
            return &FileSystem::GetPathRelativeRoot;
        else
            return &FileSystem::GetPathRelativeBinary;
    }

    static std::string GetPathRelativeRoot(const std::string& path) {
        return GetRoot() + std::string("/") + path;
    }

    static std::string GetPathRelativeBinary(const std::string& path) {
        return "../../../" + path;
    }
};