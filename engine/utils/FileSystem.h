#pragma once

#include <string>
#include "root_directory.h" // This is a configuration file generated by CMake.

class FileSystem {
private:
	typedef std::string(*Builder) (const std::string& path);

public:
	static std::string GetPath(const std::string& path) {
		static std::string(*pathBuilder)(std::string const&) = GetPathBuilder();
		return (*pathBuilder)(path);
	}

	static std::pair<std::string, std::string> GetNameFromPath(const std::string& path)
	{
		// split off the file from path
		size_t loc = path.find_last_of("/\\");

		std::string p = path.substr(0, loc);
		std::string n = path.substr(loc + 1);

		return std::make_pair(p, n);
	}

	static std::string GetConjoinedNameFromPath(const std::string& path)
	{
		auto pair = GetNameFromPath(path);

		// find the last directory in the path separate from file
		size_t loc = pair.first.find_last_of("/\\");

		// we can discard the actual path and keep the last dir
		std::string dir = pair.first.substr(loc + 1);

		std::string conjoined = dir + "_" + pair.second;
		return conjoined;
	}

	static std::string GetExtension(const std::string& path)
	{
		size_t loc = path.find_last_of(".");
		return path.substr(loc + 1);
	}

	static std::pair<std::string, std::string> Cut(const std::string& path, char delim)
	{
		size_t loc = path.find_last_of(delim);
		return std::make_pair(path.substr(0, loc), path.substr(loc + 1));
	}

	static std::string DropExtension(const std::string& path)
	{
		size_t loc = path.find_last_of(path);
		return path.substr(0, loc);
	}

private:
    static std::string const& GetRoot() {
        static char const* envRoot = getenv("LOGL_ROOT_PATH");
        static char const* givenRoot = (envRoot != nullptr ? envRoot : logl_root);
        static std::string root = (givenRoot != nullptr ? givenRoot : "");
        return root;
    }

    static Builder GetPathBuilder() {
        if (GetRoot() != "")
            return &FileSystem::GetPathRelativeRoot;
        else
            return &FileSystem::GetPathRelativeBinary;
    }

    static std::string GetPathRelativeRoot(const std::string& path) {
        return GetRoot() + std::string("/") + path;
    }

    static std::string GetPathRelativeBinary(const std::string& path) {
        return "../../../" + path;
    }
};